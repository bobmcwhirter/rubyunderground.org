<?xml version="1.0" encoding="UTF-8"?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your blog. -->
<!-- It contains information about your blog's posts, comments, and categories. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your blog. -->

<!-- To import this information into a WordPress blog follow these steps. -->
<!-- 1. Log into that blog as an administrator. -->
<!-- 2. Go to Tools: Import in the blog's admin panels (or Manage: Import in older versions of WordPress). -->
<!-- 3. Choose "WordPress" from the list. -->
<!-- 4. Upload this file using the form provided on that page. -->
<!-- 5. You will first be asked to map the authors in this export file to users -->
<!--    on the blog.  For each author, you may choose to map to an -->
<!--    existing user on the blog or to create a new user -->
<!-- 6. WordPress will then import each of the posts, comments, and categories -->
<!--    contained in this file into your blog -->

<!-- generator="WordPress/2.8.5" created="2010-06-12 10:53"-->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.0/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.0/"
>

<channel>
	<title>Ruby Underground</title>
	<link>http://rubyunderground.org</link>
	<description>Just another WordPress weblog</description>
	<pubDate>Mon, 07 Dec 2009 19:19:49 +0000</pubDate>
	<generator>http://wordpress.org/?v=2.8.5</generator>
	<language>en</language>
	<wp:wxr_version>1.0</wp:wxr_version>
	<wp:base_site_url>http://rubyunderground.org</wp:base_site_url>
	<wp:base_blog_url>http://rubyunderground.org</wp:base_blog_url>
	<wp:category><wp:category_nicename>uncategorized</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name></wp:category>
	<wp:tag><wp:tag_slug>ajax</wp:tag_slug><wp:tag_name><![CDATA[ajax]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>jboss</wp:tag_slug><wp:tag_name><![CDATA[jboss]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>jruby</wp:tag_slug><wp:tag_name><![CDATA[jruby]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>monkeypatch</wp:tag_slug><wp:tag_name><![CDATA[monkeypatch]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>rails</wp:tag_slug><wp:tag_name><![CDATA[rails]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>rest</wp:tag_slug><wp:tag_name><![CDATA[rest]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>rubyspec</wp:tag_slug><wp:tag_name><![CDATA[rubyspec]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>sessions</wp:tag_slug><wp:tag_name><![CDATA[sessions]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>swfupload</wp:tag_slug><wp:tag_name><![CDATA[swfupload]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>vfs</wp:tag_slug><wp:tag_name><![CDATA[vfs]]></wp:tag_name></wp:tag>
		<item>
<title>About</title>
<link>http://rubyunderground.org/about/</link>
<pubDate>Wed, 28 Oct 2009 21:48:26 +0000</pubDate>
<dc:creator><![CDATA[admin]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://rubyunderground.org/?page_id=2</guid>
<description></description>
<content:encoded><![CDATA[Here Bob blogs about enterprisey Ruby-related items.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>2</wp:post_id>
<wp:post_date>2009-10-28 16:48:26</wp:post_date>
<wp:post_date_gmt>2009-10-28 21:48:26</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>about</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>page</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>bfa_ata_body_title</wp:meta_key>
<wp:meta_value>About</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1258001693</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
<wp:meta_value></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
<wp:meta_value>About</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
<wp:meta_value></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
<wp:meta_value></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
<wp:meta_value></wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>SWFUpload, Rails, REST, and Sessions</title>
<link>http://rubyunderground.org/2009/11/swfupload-rails-rest-and-sessions/</link>
<pubDate>Thu, 12 Nov 2009 04:49:33 +0000</pubDate>
<dc:creator><![CDATA[admin]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<category domain="tag"><![CDATA[ajax]]></category>

		<category domain="tag" nicename="ajax"><![CDATA[ajax]]></category>

		<category domain="tag"><![CDATA[rails]]></category>

		<category domain="tag" nicename="rails"><![CDATA[rails]]></category>

		<category domain="tag"><![CDATA[rest]]></category>

		<category domain="tag" nicename="rest"><![CDATA[rest]]></category>

		<category domain="tag"><![CDATA[sessions]]></category>

		<category domain="tag" nicename="sessions"><![CDATA[sessions]]></category>

		<category domain="tag"><![CDATA[swfupload]]></category>

		<category domain="tag" nicename="swfupload"><![CDATA[swfupload]]></category>

<guid isPermaLink="false">http://rubyunderground.org/?p=3</guid>
<description></description>
<content:encoded><![CDATA[To test TorqueBox, I'm always building little applications.

My latest little application involved uploading a user avatar image, which my app, using <a title="paperclip on github" href="http://github.com/thoughtbot/paperclip">Paperclip</a>, would shuffle to Amazon S3.

Form uploads are cool, but AJAXy Flash uploads are cooler.  So I grabbed SWFUpload from the conveniently-named <a title="SWFUpload.org" href="http://swfupload.org/">sfwupload.org</a>.

Integrating it into my application was a slight challenge, alas.

My <strong>User</strong> model directly holds the <strong>avatar_*</strong> columns Paperclip wants, in the form of
<ul>
	<li>avatar_file_name</li>
	<li>avatar_content_type</li>
	<li>avatar_file_size</li>
	<li>avatar_updated_at</li>
</ul>
To my feeble mind, this seems like a <strong>PUT</strong> on an existing User resource, if I want to be RESTful.

SWFUpload will gleefully do a <strong>POST</strong>, and I can add a <strong>_method=PUT</strong> to my parameters.  This is a concession Rails has made to the rest of the world, realizing that not everything supports every HTTP verb when you want it to.  So, Rails lets you do a <strong>POST</strong>, and tell it what verb you <em>really</em> meant through a parameter named <strong>_method</strong>.  Rails only respects <strong>_method</strong>, though, if it's in the <strong>POST</strong> parameters.  So I can't use the query-string to inject the psuedo <strong>PUT</strong> (or <strong>DELETE</strong> or ...).

But SWFUpload (and most anything Flash) doesn't participate in the containing browser session.  It doesn't have my session cookie.  Or it doesn't send it, if it does. Without session information, the server doesn't really know who is sending this octet stream at the URL. So, how do I secure this update_user execution, if I can't pass a session cookie?

SWFUpload has an extension to include every cookie as a parameter in the request.  It just adds name=value pairs for each cookie into the post parameters, alongside the <strong>_method</strong> and anything else you've specified.  So, if you had a cookie named <strong>session_id</strong>, it'd get added to the form paramters as <strong>session_id</strong>.

But with TorqueBox, the Rack session piggybacks upon the Java Servlet session, which, unfortunately, doesn't know to inspect the POST parameters. By default, the servlet container is looking for a cookie.  I attempted to write a custom valve for the Tomcat request chain, but I only had reliable access to query parameters, not post parameters of the multipart form.

This makes sense, since the <strong>POST</strong> body is conceivably large, and is 100% the responsibility of the application. App servers don't typically go mucking around in it on their own.  The application expects to be able to get an input stream for the POST body and ready starting from byte 0.  This means either massive buffering, or the simply that the app-server gives it to the app unmolested (and uninspected).

And since Rails expects <strong>_method</strong> to be in the POST parameters, but session cookie information could only be inspected if present in the URL, I came to an impasse, I thought.

To sum up:
<ul>
	<li>Updating a User's avatar is a <strong>PUT</strong> request against the <strong>User</strong> resource</li>
	<li>SWFUpload can only do a <strong>POST</strong></li>
	<li>Rails lets us tunnel <strong>PUT</strong> through <strong>POST</strong> using <strong>_method=PUT</strong></li>
	<li><strong>_method=PUT</strong> must be in the <strong>POST</strong> parameters, not URL bits.</li>
	<li>SWFUpload can inject cookies request parameters.</li>
	<li>SWFUpload can use either URL-based query parameters XOR <strong>POST</strong> parameters, but not both.</li>
	<li>Session lookup can't take advantage of <strong>POST</strong> parameters, only URL bits.</li>
</ul>
Though, without any other magic involved, our Java Servlet-based session can be divined by looking for a suffix on the URL of <strong>;jsessionid=&lt;id&gt;</strong>.

For instance, you might have come across some Google-cached URLs such as
<ul>
	<li>http://foo.com/products.jsp;jsessionid=918jk2j9j09j213</li>
</ul>
That's the Java app-server's method of passing session cookie information via URL.

It probably breaks 7 of the top 5 tenets of RESTful architectures, but it works.  If we can use this method for passing our session cookie during the upload, then we can successfully secure this interaction.

Ultimately, SWFUpload does a <strong>POST</strong> to the User resource URL, with <strong>;jsession=&lt;id&gt;</strong> appended, and adds the <strong>_method=PUT</strong> to the <strong>POST</strong> parameters.  TorqueBox adds a <strong>url_suffix()</strong> method to the <strong>session</strong> object, which produces this full suffix.

Similar to this:
<pre><code>
$upload_control.swfupload({
  upload_url: '#{url_for(user)}#{session.url_suffix}',
  post_params: {
    _method: 'PUT',
    authenticity_token: '#{form_authenticity_token}',
  },
  use_query_string: false});
</code></pre>
Now we successfully pass session information, use CSRF-protection, and still communicate with a nicely RESTful controller on the back-end.

RESTful, Flashy, AJAXy, CSRF-protected and secure.  I'd call that a good day.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>3</wp:post_id>
<wp:post_date>2009-11-11 23:49:33</wp:post_date>
<wp:post_date_gmt>2009-11-12 04:49:33</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>swfupload-rails-rest-and-sessions</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1258003004</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>bfa_ata_body_title</wp:meta_key>
<wp:meta_value>SWFUpload, Rails, REST, and Sessions</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
<wp:meta_value></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
<wp:meta_value>SWFUpload, Rails, REST, and Sessions</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
<wp:meta_value></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
<wp:meta_value></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
<wp:meta_value></wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>RubySpec: Monkeypatch with Confidence</title>
<link>http://rubyunderground.org/2009/12/rubyspec-monkeypatch-with-confidence/</link>
<pubDate>Mon, 07 Dec 2009 19:16:59 +0000</pubDate>
<dc:creator><![CDATA[admin]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<category domain="tag"><![CDATA[jboss]]></category>

		<category domain="tag" nicename="jboss"><![CDATA[jboss]]></category>

		<category domain="tag"><![CDATA[jruby]]></category>

		<category domain="tag" nicename="jruby"><![CDATA[jruby]]></category>

		<category domain="tag"><![CDATA[monkeypatch]]></category>

		<category domain="tag" nicename="monkeypatch"><![CDATA[monkeypatch]]></category>

		<category domain="tag"><![CDATA[rubyspec]]></category>

		<category domain="tag" nicename="rubyspec"><![CDATA[rubyspec]]></category>

		<category domain="tag"><![CDATA[vfs]]></category>

		<category domain="tag" nicename="vfs"><![CDATA[vfs]]></category>

<guid isPermaLink="false">http://rubyunderground.org/?p=12</guid>
<description></description>
<content:encoded><![CDATA[While the tagline of <a title="RubySpec" href="http://rubyspec.org/">RubySpec</a> is actually "The Standard You Trust" it might as well be "Monkeypatch with Confidence".

<em>Here's the backstory:</em>

Building <a title="TorqueBox" href="http://torquebox.org/">TorqueBox</a>, I ultimately wanted to be able to run a Ruby application from within a simple zip bundle of the app.  And handling everything that expects to be living in a relatively-addressable filesystem.  Not just <strong>require</strong> and <strong>load</strong>, but things like <strong>Dir['*.png']</strong> and <strong>File.stat(...)</strong>.

Plus, JBoss (upon which TorqueBox is built) has this cool ability to think of a jar-within-a-jar-within-a-jar (or a Russian doll nesting of zip files) as still a simple directory-based filesystem.

JRuby, though, isn't quite as swift, in terms of paths for standard core library things such as <strong>File</strong>, or <strong>Dir</strong>, or <strong>IO</strong>.

To get this JBoss functionality (called <strong>VFS</strong> for <a title="JBoss VFS" href="http://java.dzone.com/news/jboss-virtual-file-system">Virtual File-System</a>) exposed to any arbitrary Ruby code, I'm having to monkeypatch <strong>File</strong>, <strong>Dir</strong>, <strong>IO</strong> and other classes.

For the most part, the rule for how these patches jack in is <em>"if this is a normal file/directory/io, let the normal core library handle it, otherwise, punt to VFS"</em>.

Given this rule, with VFS turned on, all existing code that doesn't touch these zip/jar bundles should exhibit no regressions.  A great way to test that is using RubySpec.  I'm approaching this problem as treating JRuby-with-VFS as a new implementation of Ruby, to be tested alongside general JRuby support.  Enabling VFS should not cause JRuby to become any less compatible with the specs.

Contributors to the VFS gem can now <a title="TorqueBox RubySpec README" href="http://github.com/torquebox/torquebox/blob/master/vfs/README-RubySpec.txt">easily run the applicable RubySpecs against JRuby both with and without VFS enabled</a>.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>12</wp:post_id>
<wp:post_date>2009-12-07 14:16:59</wp:post_date>
<wp:post_date_gmt>2009-12-07 19:16:59</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>rubyspec-monkeypatch-with-confidence</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1260222964</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>bfa_ata_body_title</wp:meta_key>
<wp:meta_value>RubySpec: Monkeypatch with Confidence</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
<wp:meta_value></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
<wp:meta_value>RubySpec: Monkeypatch with Confidence</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
<wp:meta_value></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
<wp:meta_value></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
<wp:meta_value></wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>252</wp:comment_id>
<wp:comment_author><![CDATA[Lucy22jO]]></wp:comment_author>
<wp:comment_author_email>Lucy22jO@yopmail.com</wp:comment_author_email>
<wp:comment_author_url>http://www.master-dissertations.com</wp:comment_author_url>
<wp:comment_author_IP>194.44.97.14</wp:comment_author_IP>
<wp:comment_date>2010-01-03 17:17:10</wp:comment_date>
<wp:comment_date_gmt>2010-01-03 22:17:10</wp:comment_date_gmt>
<wp:comment_content><![CDATA[I guess that that’s practicable to go to this site, because simply here students would see the superb outcome connected with this good topic. Thus, the <a href="http://www.master-dissertations.com" rel="nofollow">dissertation</a> service should utilize it for dissertation work completing.]]></wp:comment_content>
<wp:comment_approved>spam</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>251</wp:comment_id>
<wp:comment_author><![CDATA[LUCYso27]]></wp:comment_author>
<wp:comment_author_email>LUCYso27@yopmail.com</wp:comment_author_email>
<wp:comment_author_url>http://www.topthesis.com</wp:comment_author_url>
<wp:comment_author_IP>194.44.97.14</wp:comment_author_IP>
<wp:comment_date>2009-12-26 12:15:57</wp:comment_date>
<wp:comment_date_gmt>2009-12-26 17:15:57</wp:comment_date_gmt>
<wp:comment_content><![CDATA[The topic about this topic seems to be superior! Therefore people not have to create the <a href="http://www.topthesis.com" rel="nofollow">dissertation</a> and essay thesis by their own efforts, they can get your aid.]]></wp:comment_content>
<wp:comment_approved>spam</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
</channel>
</rss>
